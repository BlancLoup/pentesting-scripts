#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
oauth2-tester - Penetration test / security script for the OAuth 2.0 framework

Copyright (C) 2017 Peter Mosmans [Radically Open Security]

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
"""


from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals

import argparse
import logging
import sys
import textwrap

import requests

VERSION = '0.1'


class LogFormatter(logging.Formatter):
    """
    Class to format log messages based on their type.
    """
    FORMATS = {logging.DEBUG: "[d] %(message)s",
               logging.INFO: "[*] %(message)s",
               logging.ERROR: "[-] %(message)s",
               logging.CRITICAL: "[-] FATAL: %(message)s",
               'DEFAULT': "%(message)s"}

    def format(self, record):
        self._fmt = self.FORMATS.get(record.levelno, self.FORMATS['DEFAULT'])
        return logging.Formatter.format(self, record)


def code_to_token(args):
    """
    Convert code to token.
    """
    token = None
    params = {}
    for param in ['client_id', 'redirect_uri', 'response_type', 'scope']:
        params[param] = vars(args)[param]
    request = do_request(args.server, 'GET', params, args)
    try:
        if request and request.status_code == 302:
            if 'Location' in request.headers:
                if args.token_name in request.headers['Location']:
                    token = request.headers['Location'].split(args.token_name + '=')[1].split('&')[0]
    except IndexError:
        pass
    if token:
        logging.info('Token = %s', token)
    else:
        logging.debug('No token found: %s', request.headers)
    return token


def do_request(url, method, params, args):
    """
    Wrapper around the request object.

    Perform HTTP @method on @uri using @dictionary.
    """
    request = None
    dictionary = dict(cookies=args.cookies,
                      allow_redirects=False,
                      proxies=args.proxy,
                      verify=args.verify)
    logging.debug('Performing {0} on {1}'.format(method, url))
    logging.debug(dictionary)
    if not args.verify:
        requests.packages.urllib3.disable_warnings(
            requests.packages.urllib3.exceptions.InsecureRequestWarning)
    try:
        if method == 'DELETE':
            request = requests.delete(url, params=params, **dictionary)
        elif method == 'GET':
            request = requests.get(url, params=params, **dictionary)
        if method == 'POST':
            request = requests.post(url)
        if method == 'PUT':
            request = requests.put(url)
    except requests.exceptions.ConnectionError as exception:
        logging.error('Could not connect to {0}'.format(exception.message))
        return None
    except requests.exceptions.MissingSchema:
        logging.error('The schema seems to be missing for {0}'.format(url), -1)
        return None
    if request:
        logging.debug(request.headers)
    return request


def parse_arguments(banner):
    """
    Parse and return command line arguments.
    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent(banner + '''\
oauth2-tester - Test script for OAuth 2.0 framework

Copyright (C) 2017 Peter Mosmans [Radically Open Security]

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.'''))
    parser.add_argument('--debug', action='store_true',
                        help='Show debug information')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Be more verbose')
    parser.add_argument('--client-id', action='store',
                        help='OAuth 2.0 client_id parameter')
    parser.add_argument('--redirect-uri', action='store',
                        help='OAuth 2.0 redirect_uri parameter')
    parser.add_argument('--response-type', action='store',
                        help='OAuth 2.0 response_type parameter')
    parser.add_argument('--scope', action='store',
                        help='OAuth 2.0 comma separated scope parameter')
    parser.add_argument('--cookie', action='store',
                        help='Cookie to send with the request(s)')
    parser.add_argument('--code', action='store', type=str,
                        help='OAuth 2.0 code')
    parser.add_argument('--code-to-token', action='store_true',
                        help='Convert code to token')
    parser.add_argument('--token', action='store_true',
                        help='OAuth 2.0 token')
    parser.add_argument('--token-name', action='store', type=str, default='token',
                        help='OAuth 2.0 token name (default: token)')
    parser.add_argument('--server', action='store', type=str, metavar='URL',
                        help='The authorization server endpoint')
    parser.add_argument('--resource', type=str, metavar='URL',
                        help='The resource server endpoint')
    parser.add_argument('--validate-token', action='store', type=str,
                        metavar='HTTP_STATUS_CODE',
                        help='Validate token against resource server')
    parser.add_argument('--proxy', action='store',
                        help='Proxy server')
    parser.add_argument('--verify', action='store_true',
                        help='Validate SSL x.509 certificate')
    args = parser.parse_args()
    if (not args.code_to_token and not args.validate_token):
        parser.print_help()
        sys.exit(0)
    if args.proxy:
        args.proxy = {'http': args.proxy, 'https': args.proxy}
    else:
        args.proxy = {}
    args.scope = args.scope.replace(',', ' ')
    try:
        args.cookies = {}
        for cookie in args.cookie.split(';'):
            args.cookies[cookie.split('=')[0]] = cookie.split('=')[1]
    except IndexError:
        logging.error('Add cookies as NAME=VALUE;ANOTHER_NAME=ANOTHER_VALUE')
        sys.exit(-1)
    logging.debug(args.cookies)
    return args


def setup_logging(args):
    """
    Set up loghandlers according to options.
    """
    logger = logging.getLogger()
    logger.setLevel(0)
    console = logger.handlers[0]
    console.setFormatter(LogFormatter())
    if args.debug:
        console.setLevel(logging.DEBUG)
    else:
        console.setLevel(logging.INFO)
    # make sure requests library is, erm, less verbose
    logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(logging.ERROR)


def main():
    """
    Main program loop.
    """
    banner = 'oauth2-tester version {0}'.format(VERSION)
    args = parse_arguments(banner)
    setup_logging(args)
    logging.info('%s starting', banner)
    if args.code_to_token:
        token = code_to_token(args)


if __name__ == "__main__":
    main()
